name: tests core 10

on:
  push:
  pull_request:
  schedule:
    - cron: '56 4 * * *'

jobs:
  code-quality:
    name: "code quality  with core v10"
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        php-version: [ '7.4']
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare dependencies for TYPO3 v10"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s composerUpdate"

      - name: "Run TypoScript lint"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s lintTypoScript"

      - name: "Run PHP lint"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s lintPhp"

      - name: "Validate CGL"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s cgl"

      - name: "Ensure tests methods do not start with \"test\""
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s checkTestMethodsPrefix"

      - name: "Ensure UTF-8 files do not contain BOM"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s checkBom"

      - name: "Test .rst files for integrity"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s checkRst"

      - name: "Find duplicate exception codes"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s checkExceptionCodes"

  # @todo Disabled because of PHPStan errors - tricky to handle properly against wide range of core versions. Tackle
#       after branching and minimizing version range.
#      - name: "Run PHPStan"
#        run: "composer analyze:php"

  testsuite:
    name: all tests with core v10
    runs-on: ubuntu-22.04
    needs: code-quality
    strategy:
      fail-fast: false
      matrix:
        php-version: [ '7.4']
    steps:
      - name: "Checkout"
        uses: actions/checkout@v3

      - name: "Prepare dependencies for TYPO3 v10"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s composerUpdate"

      - name: "Unit"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s unit"

# @todo SQLite disabled. Before PHP8.1 SQLite did not returned integer as integers, test cases needs sanitizing for this.
#      - name: "Functional SQLite"
#        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s functional -d sqlite"

      - name: "Functional MariaDB 10.5 mysqli"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s functional -d mariadb -a mysqli"

      - name: "Functional MariaDB 10.5 pdo_mysql"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s functional -d mariadb -a pdo_mysql"

      - name: "Functional MySQL 8.0 mysqli"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s functional -d mariadb -a mysqli"

      - name: "Functional MySQL 8.0 pdo_mysql"
        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s functional -d mariadb -a pdo_mysql"

# @todo nimut/testing-framework sets sql_mode, which is invalid for postgres. Thus disabling until moved to typo3/testing-framework
#      - name: "Functional PostgresSQL 10"
#        run: "Build/Scripts/runTests.sh -t 10 -p ${{ matrix.php-version }} -s functional -d postgres"
